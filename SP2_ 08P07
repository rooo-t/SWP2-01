// Arduino pin assignment
#define PIN_LED  9 // PWM 핀이면서 아날로그 출력이 가능한 핀으로 수정
#define PIN_TRIG 12   // sonar sensor TRIGGER
#define PIN_ECHO 13   // sonar sensor ECHO

// configurable parameters
#define SND_VEL 346.0     // sound velocity at 24 celsius degree (unit: m/sec)
#define INTERVAL 50       // sampling interval (unit: msec)
#define PULSE_DURATION 10 // ultra-sound Pulse Duration (unit: usec)
#define _DIST_MIN 100.0   // minimum distance to be measured (unit: mm)
#define _DIST_MAX 300.0   // maximum distance to be measured (unit: mm)

#define TIMEOUT ((INTERVAL / 2) * 1000.0) // maximum echo waiting time (unit: usec)
#define SCALE (0.001 * 0.5 * SND_VEL) // coefficent to convert duration to distance

unsigned long last_sampling_time;   // unit: msec

void setup() {
  // initialize GPIO pins
  pinMode(PIN_LED, OUTPUT);         // PWM 핀
  pinMode(PIN_TRIG, OUTPUT);        // sonar TRIGGER
  pinMode(PIN_ECHO, INPUT);         // sonar ECHO
  digitalWrite(PIN_TRIG, LOW);      // turn-off Sonar 
  
  // initialize serial port
  Serial.begin(57600);
}

void loop() {
  float distance;

  // wait until next sampling time
  if (millis() < (last_sampling_time + INTERVAL))
    return;

  distance = USS_measure(PIN_TRIG, PIN_ECHO); // read distance

  int brightness = 0;  // analogWrite는 0~255 사이의 값을 필요로 함
  
  if (distance > _DIST_MAX || distance < _DIST_MIN) {
      analogWrite(PIN_LED, 255);       // LED OFF (PWM 최대 값)
  } else if (distance == 150 || distance == 250) {
      analogWrite(PIN_LED, 127);  // 50% 밝기
  } else if (distance >= 200) {
      brightness = (int)(distance - 200);    // Set Lower Value
      //brightness = constrain(brightness, 0, 255);  // brightness 값이 0~255 범위 안에 있는지 확인
      analogWrite(PIN_LED, brightness);       // LED 조정
  } else {    
      brightness = (int)(200 - distance);
      //brightness = constrain(brightness, 0, 255);  // brightness 값이 0~255 범위 안에 있는지 확인
      analogWrite(PIN_LED, brightness);       // LED ON      
  }

  // output the distance to the serial port
  Serial.print("Min:");        Serial.print(_DIST_MIN);
  Serial.print(",distance:");  Serial.print(distance);
  Serial.print(",Max:");       Serial.print(_DIST_MAX);
  Serial.println("");
  
  // update last sampling time
  last_sampling_time += INTERVAL;
}

// get a distance reading from USS. return value is in millimeter.
float USS_measure(int TRIG, int ECHO)
{
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; // unit: mm
}
